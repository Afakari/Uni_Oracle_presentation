{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Oracle Database Guide This repository provides a comprehensive guide to Oracle Database, covering its architecture, key components, and advanced features. Whether you're a beginner or an experienced user, this guide will help you understand and work with Oracle Database effectively. The original repo: link Table of Contents Introduction Oracle Architecture Setting Up the Container PL/SQL Connecting to Oracle Database Service Integration Advanced Services Conclusion Examples SQL*Plus Commands Python Connection Script Docker container Setup Contributing Contributions are welcome! Please open an issue or submit a pull request for any improvements or additions.","title":"Home"},{"location":"#oracle-database-guide","text":"This repository provides a comprehensive guide to Oracle Database, covering its architecture, key components, and advanced features. Whether you're a beginner or an experienced user, this guide will help you understand and work with Oracle Database effectively. The original repo: link","title":"Oracle Database Guide"},{"location":"#table-of-contents","text":"Introduction Oracle Architecture Setting Up the Container PL/SQL Connecting to Oracle Database Service Integration Advanced Services Conclusion","title":"Table of Contents"},{"location":"#examples","text":"SQL*Plus Commands Python Connection Script Docker container Setup","title":"Examples"},{"location":"#contributing","text":"Contributions are welcome! Please open an issue or submit a pull request for any improvements or additions.","title":"Contributing"},{"location":"01-introduction/","text":"Introduction to Oracle Database Oracle Database, often referred to as Oracle DB or simply Oracle, is a multi-model database management system produced and marketed by Oracle Corporation. It is one of the most trusted and widely used relational database engines in the world, known for its robustness, scalability, and comprehensive feature set. Oracle Database is designed to handle a wide range of workloads, from small single-machine applications to large enterprise-level systems that require high availability, security, and performance. You will most likely see this database in large enterprise companise. Key Features Oracle Database offers a wide range of features, including: High Availability: Tools like Data Guard and RAC ensure minimal downtime. Scalability: Supports large-scale applications with partitioning and sharding. Security: Advanced security features such as encryption, auditing, and data masking. Performance: In-Memory Database, SQL tuning, and parallel processing. Flexibility: Supports multiple data models (relational, JSON, XML, graph, geo). Use Cases Oracle Database is used across various industries for: Transactional Systems: OLTP applications for real-time data processing. Data Warehousing: OLAP systems for business intelligence and analytics. Hybrid Workloads: Combining transactional and analytical processing. Cloud and On-Premises: Deployable in cloud environments (Oracle Cloud, AWS, Azure) and on-premises. Financial Services: Manages complex financial transactions and regulatory compliance. Strengths Comprehensive Feature Set: Caters to various data management needs. High Performance: Delivers performance for demanding workloads. Robust Security: Protects sensitive data with advanced security features. Scalability: Handles large-scale applications with ease. High Availability: Ensures database availability during failures. Weaknesses Cost: Expensive for small and medium-sized enterprises. Complexity: Requires skilled database administrators. Resource Intensive: Needs significant hardware resources. Vendor Lock-in: Difficult to switch to other database systems. Learning Curve: Steep for new users and developers. Conclusion Oracle Database is a powerful DBMS that provides a wide range of features and tools to manage data effectively. Whether you are a database administrator, developer, or data analyst, Oracle Database offers the tools and features you need to build, manage, and analyze your data. This guide will explore the architecture, setup, and advanced features of Oracle Database, providing you with the knowledge to effectively manage and utilize this powerful database system.","title":"Introduction"},{"location":"01-introduction/#introduction-to-oracle-database","text":"Oracle Database, often referred to as Oracle DB or simply Oracle, is a multi-model database management system produced and marketed by Oracle Corporation. It is one of the most trusted and widely used relational database engines in the world, known for its robustness, scalability, and comprehensive feature set. Oracle Database is designed to handle a wide range of workloads, from small single-machine applications to large enterprise-level systems that require high availability, security, and performance. You will most likely see this database in large enterprise companise.","title":"Introduction to Oracle Database"},{"location":"01-introduction/#key-features","text":"Oracle Database offers a wide range of features, including: High Availability: Tools like Data Guard and RAC ensure minimal downtime. Scalability: Supports large-scale applications with partitioning and sharding. Security: Advanced security features such as encryption, auditing, and data masking. Performance: In-Memory Database, SQL tuning, and parallel processing. Flexibility: Supports multiple data models (relational, JSON, XML, graph, geo).","title":"Key Features"},{"location":"01-introduction/#use-cases","text":"Oracle Database is used across various industries for: Transactional Systems: OLTP applications for real-time data processing. Data Warehousing: OLAP systems for business intelligence and analytics. Hybrid Workloads: Combining transactional and analytical processing. Cloud and On-Premises: Deployable in cloud environments (Oracle Cloud, AWS, Azure) and on-premises. Financial Services: Manages complex financial transactions and regulatory compliance.","title":"Use Cases"},{"location":"01-introduction/#strengths","text":"Comprehensive Feature Set: Caters to various data management needs. High Performance: Delivers performance for demanding workloads. Robust Security: Protects sensitive data with advanced security features. Scalability: Handles large-scale applications with ease. High Availability: Ensures database availability during failures.","title":"Strengths"},{"location":"01-introduction/#weaknesses","text":"Cost: Expensive for small and medium-sized enterprises. Complexity: Requires skilled database administrators. Resource Intensive: Needs significant hardware resources. Vendor Lock-in: Difficult to switch to other database systems. Learning Curve: Steep for new users and developers.","title":"Weaknesses"},{"location":"01-introduction/#conclusion","text":"Oracle Database is a powerful DBMS that provides a wide range of features and tools to manage data effectively. Whether you are a database administrator, developer, or data analyst, Oracle Database offers the tools and features you need to build, manage, and analyze your data. This guide will explore the architecture, setup, and advanced features of Oracle Database, providing you with the knowledge to effectively manage and utilize this powerful database system.","title":"Conclusion"},{"location":"02-architecture/","text":"Oracle Architecture: A Quick Guide Oracle Database architecture is designed to ensure high performance , scalability , and reliability . It\u2019s a well-structured system that efficiently manages data through a combination of memory, processes, and storage. Here\u2019s a simplified breakdown of its key components: 1. Oracle Instance An Oracle instance is the gateway to the database. It consists of memory structures and background processes that work together to manage and access data. Think of it as the \"engine\" that keeps the database running. Key Components: System Global Area (SGA): A shared memory region that stores data and control information. Database Buffer Cache: Keeps frequently accessed data blocks in memory for faster retrieval. Shared Pool: Stores SQL execution plans and metadata for efficient query processing. Redo Log Buffer: Temporarily holds changes made to the database for recovery purposes. Large Pool: Optional area for large operations like backups or parallel processing. Program Global Area (PGA): Private memory for each server process, used for sorting, hashing, and other operations. Background Processes: These handle essential tasks like writing data to disk (DBWn), logging changes (LGWR), and recovering the database (SMON). 2. Memory Structure Oracle\u2019s memory is divided into two main areas: SGA (System Global Area): Shared among all users and processes. PGA (Program Global Area): Private to each user session. This separation ensures efficient resource utilization and prevents conflicts between users. 3. Storage Structure Oracle uses a logical and physical storage structure to organize data: Logical Storage: Tablespaces: Logical containers that group related data (e.g., one tablespace for HR data, another for Finance). Segments: Database objects like tables or indexes that consume storage. Extents: Contiguous blocks of storage allocated to segments. Data Blocks: The smallest unit of storage, typically 8KB in size. Physical Storage: Data Files: Store the actual data (e.g., tables, indexes). Control Files: Contain metadata about the database, such as its name and file locations. Redo Log Files: Record changes made to the database for recovery purposes. Why Does This Matter? Oracle\u2019s architecture is designed to: Optimize Performance: By keeping frequently accessed data in memory (SGA) and minimizing disk I/O. Ensure Reliability: Through features like redo logs and background processes that protect data integrity. Scale Seamlessly: By allowing you to add more resources (memory, storage, processes) as your workload grows. Real-World Analogy Think of Oracle\u2019s architecture like a library : SGA is the reading room , where popular books (data) are kept for quick access. PGA is your personal desk , where you work on your tasks without disturbing others. Tablespaces are the shelves , organizing books by category. Data Files are the storage rooms , where all the books are kept when not in use. Background Processes are the librarians , managing tasks like restocking shelves (writing data) and keeping records (logging changes). Redo Logs are the backup tapes , ensuring that data can be recovered in case of need. Control Files are the catalog , keeping track of all the books (database objects)","title":"Architecture"},{"location":"02-architecture/#oracle-architecture-a-quick-guide","text":"Oracle Database architecture is designed to ensure high performance , scalability , and reliability . It\u2019s a well-structured system that efficiently manages data through a combination of memory, processes, and storage. Here\u2019s a simplified breakdown of its key components:","title":"Oracle Architecture: A Quick Guide"},{"location":"02-architecture/#1-oracle-instance","text":"An Oracle instance is the gateway to the database. It consists of memory structures and background processes that work together to manage and access data. Think of it as the \"engine\" that keeps the database running.","title":"1. Oracle Instance"},{"location":"02-architecture/#key-components","text":"System Global Area (SGA): A shared memory region that stores data and control information. Database Buffer Cache: Keeps frequently accessed data blocks in memory for faster retrieval. Shared Pool: Stores SQL execution plans and metadata for efficient query processing. Redo Log Buffer: Temporarily holds changes made to the database for recovery purposes. Large Pool: Optional area for large operations like backups or parallel processing. Program Global Area (PGA): Private memory for each server process, used for sorting, hashing, and other operations. Background Processes: These handle essential tasks like writing data to disk (DBWn), logging changes (LGWR), and recovering the database (SMON).","title":"Key Components:"},{"location":"02-architecture/#2-memory-structure","text":"Oracle\u2019s memory is divided into two main areas: SGA (System Global Area): Shared among all users and processes. PGA (Program Global Area): Private to each user session. This separation ensures efficient resource utilization and prevents conflicts between users.","title":"2. Memory Structure"},{"location":"02-architecture/#3-storage-structure","text":"Oracle uses a logical and physical storage structure to organize data:","title":"3. Storage Structure"},{"location":"02-architecture/#logical-storage","text":"Tablespaces: Logical containers that group related data (e.g., one tablespace for HR data, another for Finance). Segments: Database objects like tables or indexes that consume storage. Extents: Contiguous blocks of storage allocated to segments. Data Blocks: The smallest unit of storage, typically 8KB in size.","title":"Logical Storage:"},{"location":"02-architecture/#physical-storage","text":"Data Files: Store the actual data (e.g., tables, indexes). Control Files: Contain metadata about the database, such as its name and file locations. Redo Log Files: Record changes made to the database for recovery purposes.","title":"Physical Storage:"},{"location":"02-architecture/#why-does-this-matter","text":"Oracle\u2019s architecture is designed to: Optimize Performance: By keeping frequently accessed data in memory (SGA) and minimizing disk I/O. Ensure Reliability: Through features like redo logs and background processes that protect data integrity. Scale Seamlessly: By allowing you to add more resources (memory, storage, processes) as your workload grows.","title":"Why Does This Matter?"},{"location":"02-architecture/#real-world-analogy","text":"Think of Oracle\u2019s architecture like a library : SGA is the reading room , where popular books (data) are kept for quick access. PGA is your personal desk , where you work on your tasks without disturbing others. Tablespaces are the shelves , organizing books by category. Data Files are the storage rooms , where all the books are kept when not in use. Background Processes are the librarians , managing tasks like restocking shelves (writing data) and keeping records (logging changes). Redo Logs are the backup tapes , ensuring that data can be recovered in case of need. Control Files are the catalog , keeping track of all the books (database objects)","title":"Real-World Analogy"},{"location":"03-container-setup/","text":"Setting Up the Container: A Practical Guide Oracle Database 12c introduced the Multitenant Architecture , a game-changer for managing multiple databases efficiently. With this architecture, you can create a Container Database (CDB) that houses multiple Pluggable Databases (PDBs) . Each PDB acts as a self-contained database but shares the same Oracle instance and background processes as the CDB. What Are Pluggable Databases (PDBs)? PDBs are like independent databases within a single container. They have their own: Data: Tables, indexes, and other objects. Schemas: Logical structures for organizing data. Users: Access controls and permissions. However, they share the same Oracle instance and background processes , making them lightweight and efficient. Benefits of Multitenant Architecture Resource Efficiency: By sharing the same instance and processes, PDBs reduce overhead and save resources. Simplified Management: You can manage multiple PDBs as a single entity, making tasks like backups, patching, and upgrades easier. Isolation: Changes in one PDB don\u2019t affect others, ensuring security and stability. How to Create a PDB Creating a PDB is straightforward. Use the CREATE PLUGGABLE DATABASE statement in SQL*Plus or any Oracle SQL tool. Here\u2019s an example: CREATE PLUGGABLE DATABASE pdb_name ADMIN USER pdb_admin IDENTIFIED BY password FILE_NAME_CONVERT = ('/path/to/source/', '/path/to/destination/'); What This Does: pdb_name : The name of your new PDB. pdb_admin : The admin user for the PDB. password : The password for the admin user. FILE_NAME_CONVERT : Maps source file paths to destination paths for the PDB\u2019s data files. Why Use This Approach? Saves Time: Automates repetitive tasks and reduces manual errors. Consistency: Ensures all PDBs are set up the same way. Scalability: Makes it easy to add more PDBs as your needs grow. Real-World Use Case Imagine you\u2019re managing databases for multiple departments (HR, Finance, Sales) in a company. Instead of running separate instances for each, you can: Create a CDB as the main container. Add a PDB for each department (e.g., HR_PDB , Finance_PDB , Sales_PDB ). Manage them all centrally while keeping their data isolated. Next Steps Check out the scripts in ../example/oracle . Customize them for your environment.","title":"Container Setup"},{"location":"03-container-setup/#setting-up-the-container-a-practical-guide","text":"Oracle Database 12c introduced the Multitenant Architecture , a game-changer for managing multiple databases efficiently. With this architecture, you can create a Container Database (CDB) that houses multiple Pluggable Databases (PDBs) . Each PDB acts as a self-contained database but shares the same Oracle instance and background processes as the CDB.","title":"Setting Up the Container: A Practical Guide"},{"location":"03-container-setup/#what-are-pluggable-databases-pdbs","text":"PDBs are like independent databases within a single container. They have their own: Data: Tables, indexes, and other objects. Schemas: Logical structures for organizing data. Users: Access controls and permissions. However, they share the same Oracle instance and background processes , making them lightweight and efficient.","title":"What Are Pluggable Databases (PDBs)?"},{"location":"03-container-setup/#benefits-of-multitenant-architecture","text":"Resource Efficiency: By sharing the same instance and processes, PDBs reduce overhead and save resources. Simplified Management: You can manage multiple PDBs as a single entity, making tasks like backups, patching, and upgrades easier. Isolation: Changes in one PDB don\u2019t affect others, ensuring security and stability.","title":"Benefits of Multitenant Architecture"},{"location":"03-container-setup/#how-to-create-a-pdb","text":"Creating a PDB is straightforward. Use the CREATE PLUGGABLE DATABASE statement in SQL*Plus or any Oracle SQL tool. Here\u2019s an example: CREATE PLUGGABLE DATABASE pdb_name ADMIN USER pdb_admin IDENTIFIED BY password FILE_NAME_CONVERT = ('/path/to/source/', '/path/to/destination/');","title":"How to Create a PDB"},{"location":"03-container-setup/#what-this-does","text":"pdb_name : The name of your new PDB. pdb_admin : The admin user for the PDB. password : The password for the admin user. FILE_NAME_CONVERT : Maps source file paths to destination paths for the PDB\u2019s data files.","title":"What This Does:"},{"location":"03-container-setup/#why-use-this-approach","text":"Saves Time: Automates repetitive tasks and reduces manual errors. Consistency: Ensures all PDBs are set up the same way. Scalability: Makes it easy to add more PDBs as your needs grow.","title":"Why Use This Approach?"},{"location":"03-container-setup/#real-world-use-case","text":"Imagine you\u2019re managing databases for multiple departments (HR, Finance, Sales) in a company. Instead of running separate instances for each, you can: Create a CDB as the main container. Add a PDB for each department (e.g., HR_PDB , Finance_PDB , Sales_PDB ). Manage them all centrally while keeping their data isolated.","title":"Real-World Use Case"},{"location":"03-container-setup/#next-steps","text":"Check out the scripts in ../example/oracle . Customize them for your environment.","title":"Next Steps"},{"location":"04-plsql/","text":"PL/SQL: A Deep Dive PL/SQL (Procedural Language/Structured Query Language) is Oracle\u2019s procedural extension to SQL. While SQL is great for querying and manipulating data, PL/SQL adds the ability to write procedural logic , making it ideal for building complex, database-centric applications. Here\u2019s a detailed explanation of how PL/SQL works, how it differs from SQL, and how their engines interact. How PL/SQL Works 1. PL/SQL Execution Process PL/SQL code is executed in three main steps: Parsing: The PL/SQL engine checks the syntax of the code and generates an execution plan. This ensures the code is valid and ready to run. Compilation: The code is compiled into machine code (p-code) that the Oracle Database server can execute. This step also includes optimizations for better performance. Execution: The compiled code is executed, and the results are returned to the calling application. During execution, PL/SQL can interact with the database using SQL statements. 2. PL/SQL Engine The PL/SQL engine is integrated into the Oracle Database server. It consists of: Procedural Statement Executor: Handles procedural logic (e.g., loops, conditionals). SQL Statement Executor: Executes SQL statements embedded in PL/SQL code. Memory Manager: Manages memory for variables, cursors, and other objects. Key Features of PL/SQL PL/SQL extends SQL with procedural programming capabilities, including: Variables and Data Types: Supports scalar types (e.g., NUMBER , VARCHAR2 ), composite types (e.g., records, collections), and reference types (e.g., cursors). Control Structures: Provides loops ( FOR , WHILE ), conditionals ( IF-THEN-ELSE ), and exception handling ( EXCEPTION ). Cursors: Allows processing of multiple rows returned by a query. Packages: Groups related procedures, functions, and variables into reusable modules. Stored Procedures and Functions: Encapsulates business logic in the database for reuse and performance. Differences Between SQL and PL/SQL Feature SQL PL/SQL Purpose Query and manipulate data. Add procedural logic to SQL. Execution Single statements executed one by one. Blocks of code executed as a unit. Control Structures None. Loops, conditionals, exception handling, goto jumps. Variables No support for variables. Supports variables and data types. Reusability Limited to individual queries. Supports reusable procedures, functions, and packages. Performance Optimized for single queries. Optimized for complex logic and bulk operations. How SQL and PL/SQL Engines Interact The SQL and PL/SQL engines work together seamlessly within the Oracle Database: SQL in PL/SQL: PL/SQL can embed SQL statements to query or modify data. For example: sql BEGIN SELECT name INTO emp_name FROM employees WHERE id = emp_id; END; Here, the SQL statement is executed by the SQL engine, and the result is processed by the PL/SQL engine. PL/SQL in SQL: SQL can call PL/SQL functions or procedures. For example: sql SELECT get_employee_name(101) FROM dual; Here, the PL/SQL function get_employee_name is executed by the PL/SQL engine, and the result is returned to the SQL engine. Shared Memory: Both engines share the same memory structures (e.g., SGA, PGA), ensuring efficient data transfer and processing. Example: PL/SQL in Action Here\u2019s a simple example of a PL/SQL function that retrieves an employee\u2019s name by their ID: CREATE OR REPLACE FUNCTION hello_world (name varchar2) RETURN VARCHAR2 IS emp_name VARCHAR2(100); BEGIN select 'hello ' || name from dual; dbms_output.put_line('Hello '|| name); EXCEPTION WHEN NO_DATA_FOUND THEN RETURN 'no hellos'; END; What This Does: Declares a function hello_world that takes a name as input. Executes a SQL query to fetch the hello message with the provided name. Handles the NO_DATA_FOUND exception ( Won't happen, we are not actually fetching any data). Returns the string, also outputs it in dbms_output. Why Use PL/SQL? Performance: Reduces network traffic by executing logic on the database server. Reusability: Encapsulates business logic in stored procedures and functions. Security: Centralizes logic in the database, reducing exposure to SQL injection. Scalability: Handles complex operations efficiently, even with large datasets. Further Reading To dive deeper into PL/SQL, check out these resources: Oracle PL/SQL Documentation: Oracle PL/SQL Language Reference PL/SQL Tutorials: PL/SQL Tutorial by TutorialsPoint","title":"PL/SQL"},{"location":"04-plsql/#plsql-a-deep-dive","text":"PL/SQL (Procedural Language/Structured Query Language) is Oracle\u2019s procedural extension to SQL. While SQL is great for querying and manipulating data, PL/SQL adds the ability to write procedural logic , making it ideal for building complex, database-centric applications. Here\u2019s a detailed explanation of how PL/SQL works, how it differs from SQL, and how their engines interact.","title":"PL/SQL: A Deep Dive"},{"location":"04-plsql/#how-plsql-works","text":"","title":"How PL/SQL Works"},{"location":"04-plsql/#1-plsql-execution-process","text":"PL/SQL code is executed in three main steps: Parsing: The PL/SQL engine checks the syntax of the code and generates an execution plan. This ensures the code is valid and ready to run. Compilation: The code is compiled into machine code (p-code) that the Oracle Database server can execute. This step also includes optimizations for better performance. Execution: The compiled code is executed, and the results are returned to the calling application. During execution, PL/SQL can interact with the database using SQL statements.","title":"1. PL/SQL Execution Process"},{"location":"04-plsql/#2-plsql-engine","text":"The PL/SQL engine is integrated into the Oracle Database server. It consists of: Procedural Statement Executor: Handles procedural logic (e.g., loops, conditionals). SQL Statement Executor: Executes SQL statements embedded in PL/SQL code. Memory Manager: Manages memory for variables, cursors, and other objects.","title":"2. PL/SQL Engine"},{"location":"04-plsql/#key-features-of-plsql","text":"PL/SQL extends SQL with procedural programming capabilities, including: Variables and Data Types: Supports scalar types (e.g., NUMBER , VARCHAR2 ), composite types (e.g., records, collections), and reference types (e.g., cursors). Control Structures: Provides loops ( FOR , WHILE ), conditionals ( IF-THEN-ELSE ), and exception handling ( EXCEPTION ). Cursors: Allows processing of multiple rows returned by a query. Packages: Groups related procedures, functions, and variables into reusable modules. Stored Procedures and Functions: Encapsulates business logic in the database for reuse and performance.","title":"Key Features of PL/SQL"},{"location":"04-plsql/#differences-between-sql-and-plsql","text":"Feature SQL PL/SQL Purpose Query and manipulate data. Add procedural logic to SQL. Execution Single statements executed one by one. Blocks of code executed as a unit. Control Structures None. Loops, conditionals, exception handling, goto jumps. Variables No support for variables. Supports variables and data types. Reusability Limited to individual queries. Supports reusable procedures, functions, and packages. Performance Optimized for single queries. Optimized for complex logic and bulk operations.","title":"Differences Between SQL and PL/SQL"},{"location":"04-plsql/#how-sql-and-plsql-engines-interact","text":"The SQL and PL/SQL engines work together seamlessly within the Oracle Database: SQL in PL/SQL: PL/SQL can embed SQL statements to query or modify data. For example: sql BEGIN SELECT name INTO emp_name FROM employees WHERE id = emp_id; END; Here, the SQL statement is executed by the SQL engine, and the result is processed by the PL/SQL engine. PL/SQL in SQL: SQL can call PL/SQL functions or procedures. For example: sql SELECT get_employee_name(101) FROM dual; Here, the PL/SQL function get_employee_name is executed by the PL/SQL engine, and the result is returned to the SQL engine. Shared Memory: Both engines share the same memory structures (e.g., SGA, PGA), ensuring efficient data transfer and processing.","title":"How SQL and PL/SQL Engines Interact"},{"location":"04-plsql/#example-plsql-in-action","text":"Here\u2019s a simple example of a PL/SQL function that retrieves an employee\u2019s name by their ID: CREATE OR REPLACE FUNCTION hello_world (name varchar2) RETURN VARCHAR2 IS emp_name VARCHAR2(100); BEGIN select 'hello ' || name from dual; dbms_output.put_line('Hello '|| name); EXCEPTION WHEN NO_DATA_FOUND THEN RETURN 'no hellos'; END;","title":"Example: PL/SQL in Action"},{"location":"04-plsql/#what-this-does","text":"Declares a function hello_world that takes a name as input. Executes a SQL query to fetch the hello message with the provided name. Handles the NO_DATA_FOUND exception ( Won't happen, we are not actually fetching any data). Returns the string, also outputs it in dbms_output.","title":"What This Does:"},{"location":"04-plsql/#why-use-plsql","text":"Performance: Reduces network traffic by executing logic on the database server. Reusability: Encapsulates business logic in stored procedures and functions. Security: Centralizes logic in the database, reducing exposure to SQL injection. Scalability: Handles complex operations efficiently, even with large datasets.","title":"Why Use PL/SQL?"},{"location":"04-plsql/#further-reading","text":"To dive deeper into PL/SQL, check out these resources: Oracle PL/SQL Documentation: Oracle PL/SQL Language Reference PL/SQL Tutorials: PL/SQL Tutorial by TutorialsPoint","title":"Further Reading"},{"location":"05-connecting-to-oracle/","text":"Connecting to Oracle Database: A Practical Guide Connecting to Oracle Database can be done in several ways, depending on your needs and environment. Whether you\u2019re using a command-line tool, a graphical application, or a programming language, here\u2019s a breakdown of the most common methods: 1. Connecting Through Shell (SQL*Plus) SQL*Plus is Oracle\u2019s command-line tool for interacting with the database. It\u2019s lightweight and ideal for quick tasks or scripting. Steps: Access the Container: If you\u2019re using a containerized Oracle Database, first enter the container: bash docker exec -it <container_name> /bin/bash Connect Using SQL*Plus: Use the following command to connect: bash sqlplus username/password@hostname:port/service_name Example: bash sqlplus sys/Oracle123@localhost:1521/ORCLCDB as sysdba Run SQL Commands: Once connected, you can execute SQL queries or PL/SQL blocks directly. 2. Connecting Through Applications For a more user-friendly experience, you can use graphical tools like Toad for Oracle (Windows) or DBeaver (cross-platform). Steps: Install the Application: Download and install your preferred tool. Set Up the Connection: Hostname: The server where Oracle Database is running. Port: Default is 1521 . Service Name: The database service name (e.g., ORCLCDB ). Username/Password: Your database credentials. Test the Connection: Most tools provide a \"Test Connection\" button to ensure everything is set up correctly. 3. Connecting Programmatically You can connect to Oracle Database using programming languages like Python. However, this method can be tricky due to dependencies like the Oracle Client. These steps can differ depending on your approach. There is a python example with a helper script at ../exmaple/python A Dockerfile and helper scripts are available in ../example/python to simplify the setup process. This includes installing cx_Oracle and configuring the Oracle Client. Note: Setting up programmatic connections can be challenging due to dependencies and configuration requirements. The provided Docker setup aims to simplify this process, but be prepared for some troubleshooting. Why Use Different Methods? SQL*Plus: Quick and lightweight, ideal for scripting or troubleshooting. Graphical Tools: User-friendly and great for exploring data or writing complex queries. Programmatic Connections: Perfect for integrating Oracle Database into applications or automating tasks. Next Steps Try SQL*Plus: Use the provided command to connect and run a simple query. Explore Graphical Tools: Set up a connection in Toad or DBeaver for a more visual experience. Experiment with Python: Use the Docker setup in ../example/python to connect programmatically. With these methods, you can connect to Oracle Database in the way that best suits your workflow.","title":"Connecting to Oracle"},{"location":"05-connecting-to-oracle/#connecting-to-oracle-database-a-practical-guide","text":"Connecting to Oracle Database can be done in several ways, depending on your needs and environment. Whether you\u2019re using a command-line tool, a graphical application, or a programming language, here\u2019s a breakdown of the most common methods:","title":"Connecting to Oracle Database: A Practical Guide"},{"location":"05-connecting-to-oracle/#1-connecting-through-shell-sqlplus","text":"SQL*Plus is Oracle\u2019s command-line tool for interacting with the database. It\u2019s lightweight and ideal for quick tasks or scripting.","title":"1. Connecting Through Shell (SQL*Plus)"},{"location":"05-connecting-to-oracle/#steps","text":"Access the Container: If you\u2019re using a containerized Oracle Database, first enter the container: bash docker exec -it <container_name> /bin/bash Connect Using SQL*Plus: Use the following command to connect: bash sqlplus username/password@hostname:port/service_name Example: bash sqlplus sys/Oracle123@localhost:1521/ORCLCDB as sysdba Run SQL Commands: Once connected, you can execute SQL queries or PL/SQL blocks directly.","title":"Steps:"},{"location":"05-connecting-to-oracle/#2-connecting-through-applications","text":"For a more user-friendly experience, you can use graphical tools like Toad for Oracle (Windows) or DBeaver (cross-platform).","title":"2. Connecting Through Applications"},{"location":"05-connecting-to-oracle/#steps_1","text":"Install the Application: Download and install your preferred tool. Set Up the Connection: Hostname: The server where Oracle Database is running. Port: Default is 1521 . Service Name: The database service name (e.g., ORCLCDB ). Username/Password: Your database credentials. Test the Connection: Most tools provide a \"Test Connection\" button to ensure everything is set up correctly.","title":"Steps:"},{"location":"05-connecting-to-oracle/#3-connecting-programmatically","text":"You can connect to Oracle Database using programming languages like Python. However, this method can be tricky due to dependencies like the Oracle Client. These steps can differ depending on your approach. There is a python example with a helper script at ../exmaple/python A Dockerfile and helper scripts are available in ../example/python to simplify the setup process. This includes installing cx_Oracle and configuring the Oracle Client.","title":"3. Connecting Programmatically"},{"location":"05-connecting-to-oracle/#note","text":"","title":"Note:"},{"location":"05-connecting-to-oracle/#setting-up-programmatic-connections-can-be-challenging-due-to-dependencies-and-configuration-requirements-the-provided-docker-setup-aims-to-simplify-this-process-but-be-prepared-for-some-troubleshooting","text":"","title":"Setting up programmatic connections can be challenging due to dependencies and configuration requirements. The provided Docker setup aims to simplify this process, but be prepared for some troubleshooting."},{"location":"05-connecting-to-oracle/#why-use-different-methods","text":"SQL*Plus: Quick and lightweight, ideal for scripting or troubleshooting. Graphical Tools: User-friendly and great for exploring data or writing complex queries. Programmatic Connections: Perfect for integrating Oracle Database into applications or automating tasks.","title":"Why Use Different Methods?"},{"location":"05-connecting-to-oracle/#next-steps","text":"Try SQL*Plus: Use the provided command to connect and run a simple query. Explore Graphical Tools: Set up a connection in Toad or DBeaver for a more visual experience. Experiment with Python: Use the Docker setup in ../example/python to connect programmatically. With these methods, you can connect to Oracle Database in the way that best suits your workflow.","title":"Next Steps"},{"location":"06-service-integration/","text":"Service Integration: Supercharging Oracle Database Oracle Database isn\u2019t just a database\u2014it\u2019s a powerhouse that works hand-in-hand with a suite of tools to make your life easier. Whether you\u2019re building apps, moving data, or analyzing trends, these tools have got you covered. Let\u2019s break it down: 1. Oracle Application Express (APEX): Build Apps Fast Think of APEX as your shortcut to building web apps without drowning in code. It\u2019s perfect for creating tools, dashboards, or even customer-facing apps\u2014all on top of Oracle Database. Strong points: No Coding Wizardry Needed: Drag, drop, and done. Seriously, it\u2019s that easy. Built-in Security: Keeps your apps safe without extra hassle. Grows with You: Handles small teams or massive enterprises without breaking a sweat. Quick Prototyping: Go from idea to working app in no time. Use Case: Internal tools like data entry forms or reports. Customer portals for e-commerce or service management. 2. Oracle Data Integrator (ODI): Easy data integrator ODI is your go-to tool for moving data around\u2014whether it\u2019s from old systems, spreadsheets, or other databases. It\u2019s like a data-moving ninja that keeps everything in sync. Strong points: Works with Anything: Databases, files,etc... No Heavy Coding: Set up the rules, crons,etc... ODI does the heavy lifting. Real-Time Sync: Keeps your data fresh and up-to-date. Keeps Data Clean: Built-in checks ensure your data is accurate. Use Case: Migrating data from legacy systems to Oracle. Combining data from multiple sources for analytics. 3. Oracle Analytics Server (OAS): Turn Data into Insights Strong Points: Beautiful Visuals: Create dashboards and charts that actually make sense. Self-Service: Let your team explore data without waiting for IT. Works Everywhere: Analyze data from Oracle, cloud, or other sources. Ideal For: Business intelligence and reporting. Predictive analytics for sales, marketing, or operations. Overall easy dashbaord setup Why These Tools Matter They take Oracle Database from a simple data store to a full-fledged platform for building, integrating, and analyzing. Whether you\u2019re a developer, analyst, or business user, they\u2019ll save you time and unlock new possibilities.","title":"Service Integration"},{"location":"06-service-integration/#service-integration-supercharging-oracle-database","text":"Oracle Database isn\u2019t just a database\u2014it\u2019s a powerhouse that works hand-in-hand with a suite of tools to make your life easier. Whether you\u2019re building apps, moving data, or analyzing trends, these tools have got you covered. Let\u2019s break it down:","title":"Service Integration: Supercharging Oracle Database"},{"location":"06-service-integration/#1-oracle-application-express-apex-build-apps-fast","text":"Think of APEX as your shortcut to building web apps without drowning in code. It\u2019s perfect for creating tools, dashboards, or even customer-facing apps\u2014all on top of Oracle Database.","title":"1. Oracle Application Express (APEX): Build Apps Fast"},{"location":"06-service-integration/#strong-points","text":"No Coding Wizardry Needed: Drag, drop, and done. Seriously, it\u2019s that easy. Built-in Security: Keeps your apps safe without extra hassle. Grows with You: Handles small teams or massive enterprises without breaking a sweat. Quick Prototyping: Go from idea to working app in no time.","title":"Strong points:"},{"location":"06-service-integration/#use-case","text":"Internal tools like data entry forms or reports. Customer portals for e-commerce or service management.","title":"Use Case:"},{"location":"06-service-integration/#2-oracle-data-integrator-odi-easy-data-integrator","text":"ODI is your go-to tool for moving data around\u2014whether it\u2019s from old systems, spreadsheets, or other databases. It\u2019s like a data-moving ninja that keeps everything in sync.","title":"2. Oracle Data Integrator (ODI): Easy data integrator"},{"location":"06-service-integration/#strong-points_1","text":"Works with Anything: Databases, files,etc... No Heavy Coding: Set up the rules, crons,etc... ODI does the heavy lifting. Real-Time Sync: Keeps your data fresh and up-to-date. Keeps Data Clean: Built-in checks ensure your data is accurate.","title":"Strong points:"},{"location":"06-service-integration/#use-case_1","text":"Migrating data from legacy systems to Oracle. Combining data from multiple sources for analytics.","title":"Use Case:"},{"location":"06-service-integration/#3-oracle-analytics-server-oas-turn-data-into-insights","text":"","title":"3. Oracle Analytics Server (OAS): Turn Data into Insights"},{"location":"06-service-integration/#strong-points_2","text":"Beautiful Visuals: Create dashboards and charts that actually make sense. Self-Service: Let your team explore data without waiting for IT. Works Everywhere: Analyze data from Oracle, cloud, or other sources.","title":"Strong Points:"},{"location":"06-service-integration/#ideal-for","text":"Business intelligence and reporting. Predictive analytics for sales, marketing, or operations. Overall easy dashbaord setup","title":"Ideal For:"},{"location":"06-service-integration/#why-these-tools-matter","text":"They take Oracle Database from a simple data store to a full-fledged platform for building, integrating, and analyzing. Whether you\u2019re a developer, analyst, or business user, they\u2019ll save you time and unlock new possibilities.","title":"Why These Tools Matter"},{"location":"07-advanced-services/","text":"Advanced Services in Oracle Database Oracle Database offers a suite of advanced services designed to ensure data integrity , high availability , and disaster recovery . These tools are critical for enterprise environments where downtime or data loss is not an option. Below is a detailed overview of these services: 1. Flashback Technology Flashback Technology provides a powerful mechanism to recover data from a previous point in time, enabling you to undo errors or analyze historical data without restoring from backups. Key Components: Flashback Query: Allows querying data as it existed at a specific point in time. Useful for recovering accidentally deleted or modified data. sql SELECT * FROM employees AS OF TIMESTAMP TO_TIMESTAMP('2023-10-01 12:00:00', 'YYYY-MM-DD HH24:MI:SS'); Flashback Table: Restores a table to a previous state, undoing changes made after a specific point in time. sql FLASHBACK TABLE employees TO TIMESTAMP TO_TIMESTAMP('2023-10-01 12:00:00', 'YYYY-MM-DD HH24:MI:SS'); Flashback Database: Rolls back the entire database to a previous point in time, useful for catastrophic errors or logical corruption. sql FLASHBACK DATABASE TO TIMESTAMP TO_TIMESTAMP('2023-10-01 12:00:00', 'YYYY-MM-DD HH24:MI:SS'); Use Cases: Recovering from accidental data deletions or updates. Auditing historical data changes. Testing scenarios by reverting to a previous state. 2. Oracle Recovery Manager (RMAN) RMAN is Oracle\u2019s robust backup and recovery tool, designed to simplify and automate the process of protecting your database. Key Features: Incremental Backups: Backs up only the data that has changed since the last backup, reducing time and storage requirements. bash RMAN> BACKUP INCREMENTAL LEVEL 1 DATABASE; Compressed Backups: Reduces the size of backup files, saving storage space. bash RMAN> BACKUP AS COMPRESSED BACKUPSET DATABASE; Automated Recovery: Streamlines the recovery process with minimal manual intervention. bash RMAN> RECOVER DATABASE; Backup Validation: Verifies the integrity of backup files without restoring them. bash RMAN> VALIDATE BACKUPSET; Use Cases: Regular database backups for disaster recovery. Point-in-time recovery for logical errors. Migrating databases across environments. 3. Oracle Data Guard Oracle Data Guard ensures high availability and disaster recovery by maintaining a synchronized standby database. It provides real-time data replication and automatic failover capabilities. Key Features: Real-Time Data Replication: Continuously synchronizes the primary and standby databases, ensuring minimal data loss. Automatic Failover: Automatically promotes the standby database to primary in case of a failure, minimizing downtime. Role Transitions: Allows seamless switching between primary and standby roles for maintenance or testing. Data Protection Modes: Offers multiple modes (Maximum Performance, Maximum Availability, Maximum Protection) to balance performance and data safety. Use Cases: Disaster recovery for mission-critical systems. Zero-downtime maintenance and upgrades. Load balancing by offloading read-only queries to the standby database. Why These Services Matter These advanced services are essential for maintaining data integrity , availability , and recoverability in enterprise environments. They provide the tools needed to: Recover from human errors or logical corruption (Flashback). Protect against data loss with efficient backups (RMAN). Ensure business continuity with high availability (Data Guard).","title":"Advanced Services"},{"location":"07-advanced-services/#advanced-services-in-oracle-database","text":"Oracle Database offers a suite of advanced services designed to ensure data integrity , high availability , and disaster recovery . These tools are critical for enterprise environments where downtime or data loss is not an option. Below is a detailed overview of these services:","title":"Advanced Services in Oracle Database"},{"location":"07-advanced-services/#1-flashback-technology","text":"Flashback Technology provides a powerful mechanism to recover data from a previous point in time, enabling you to undo errors or analyze historical data without restoring from backups.","title":"1. Flashback Technology"},{"location":"07-advanced-services/#key-components","text":"Flashback Query: Allows querying data as it existed at a specific point in time. Useful for recovering accidentally deleted or modified data. sql SELECT * FROM employees AS OF TIMESTAMP TO_TIMESTAMP('2023-10-01 12:00:00', 'YYYY-MM-DD HH24:MI:SS'); Flashback Table: Restores a table to a previous state, undoing changes made after a specific point in time. sql FLASHBACK TABLE employees TO TIMESTAMP TO_TIMESTAMP('2023-10-01 12:00:00', 'YYYY-MM-DD HH24:MI:SS'); Flashback Database: Rolls back the entire database to a previous point in time, useful for catastrophic errors or logical corruption. sql FLASHBACK DATABASE TO TIMESTAMP TO_TIMESTAMP('2023-10-01 12:00:00', 'YYYY-MM-DD HH24:MI:SS');","title":"Key Components:"},{"location":"07-advanced-services/#use-cases","text":"Recovering from accidental data deletions or updates. Auditing historical data changes. Testing scenarios by reverting to a previous state.","title":"Use Cases:"},{"location":"07-advanced-services/#2-oracle-recovery-manager-rman","text":"RMAN is Oracle\u2019s robust backup and recovery tool, designed to simplify and automate the process of protecting your database.","title":"2. Oracle Recovery Manager (RMAN)"},{"location":"07-advanced-services/#key-features","text":"Incremental Backups: Backs up only the data that has changed since the last backup, reducing time and storage requirements. bash RMAN> BACKUP INCREMENTAL LEVEL 1 DATABASE; Compressed Backups: Reduces the size of backup files, saving storage space. bash RMAN> BACKUP AS COMPRESSED BACKUPSET DATABASE; Automated Recovery: Streamlines the recovery process with minimal manual intervention. bash RMAN> RECOVER DATABASE; Backup Validation: Verifies the integrity of backup files without restoring them. bash RMAN> VALIDATE BACKUPSET;","title":"Key Features:"},{"location":"07-advanced-services/#use-cases_1","text":"Regular database backups for disaster recovery. Point-in-time recovery for logical errors. Migrating databases across environments.","title":"Use Cases:"},{"location":"07-advanced-services/#3-oracle-data-guard","text":"Oracle Data Guard ensures high availability and disaster recovery by maintaining a synchronized standby database. It provides real-time data replication and automatic failover capabilities.","title":"3. Oracle Data Guard"},{"location":"07-advanced-services/#key-features_1","text":"Real-Time Data Replication: Continuously synchronizes the primary and standby databases, ensuring minimal data loss. Automatic Failover: Automatically promotes the standby database to primary in case of a failure, minimizing downtime. Role Transitions: Allows seamless switching between primary and standby roles for maintenance or testing. Data Protection Modes: Offers multiple modes (Maximum Performance, Maximum Availability, Maximum Protection) to balance performance and data safety.","title":"Key Features:"},{"location":"07-advanced-services/#use-cases_2","text":"Disaster recovery for mission-critical systems. Zero-downtime maintenance and upgrades. Load balancing by offloading read-only queries to the standby database.","title":"Use Cases:"},{"location":"07-advanced-services/#why-these-services-matter","text":"These advanced services are essential for maintaining data integrity , availability , and recoverability in enterprise environments. They provide the tools needed to: Recover from human errors or logical corruption (Flashback). Protect against data loss with efficient backups (RMAN). Ensure business continuity with high availability (Data Guard).","title":"Why These Services Matter"},{"location":"08-conclusion/","text":"","title":"Conclusion"},{"location":"examples/oracle/","text":"Oracle Database Container Setup A quick guide to setting up an Oracle Database using Docker Compose. Docker Compose Configuration Here\u2019s the docker-compose.yml file for setting up the Oracle Database container: services: oracle: image: docker.arvancloud.ir/wvbirder/database-enterprise:12.2.0.1-slim container_name: oracle hostname: oracle ports: - \"1521:1521\" # Oracle Database port - \"5000:5000\" # Additional port (optional) environment: - ORACLE_PWD=localdev # Password for the Oracle SYS user - ORACLE_CHARACTERSET=AL32UTF8 # Character set for the database volumes: - oracle_data:/opt/oracle/oradata # Persistent storage for database files networks: - monitoring_network # Custom network for the container healthcheck: test: [ \"CMD\", \"sqlplus\", \"-S\", \"sys/localdev@localhost:1521/orclpdb1.localdomain as sysdba\", \"<\", \"/dev/null\", ] interval: 30s # Check every 30 seconds timeout: 10s # Timeout for the health check retries: 3 # Number of retries before marking as unhealthy logging: driver: \"json-file\" options: max-size: \"10m\" # Maximum log file size max-file: \"3\" # Maximum number of log files deploy: resources: limits: cpus: \"2\" # CPU limit memory: 4G # Memory limit reservations: memory: 2G # Memory reservation volumes: oracle_data: # Persistent volume for Oracle data networks: monitoring_network: # Custom network for the container Key Components Image The image used is docker.arvancloud.ir/wvbirder/database-enterprise:12.2.0.1-slim . This image does not run init scripts. In case of actual use, you need to modify this image and customize it. Alternatively, you can use the official image from GitHub . Ports 1521:1521 : The default port for Oracle Database connections. 5000:5000 : An additional port for other services (optional). Environment Variables ORACLE_PWD : Sets the password for the Oracle SYS user. ORACLE_CHARACTERSET : Configures the character set for the database. Volumes oracle_data : Persistent storage for Oracle database files, ensuring data is retained even if the container is restarted. Networks monitoring_network : A custom network for the container, allowing it to communicate with other services. Health Check The health check uses sqlplus to verify the database is running and accessible. It runs every 30 seconds, with a timeout of 10 seconds and 3 retries. Logging Logs are stored in JSON format, with a maximum size of 10 MB per file and up to 3 files. Resource Limits The container is limited to 2 CPUs and 4 GB of memory, with a reservation of 2 GB of memory. Running the Container Start the Container: bash docker-compose up -d Check the Logs: bash docker logs -f oracle Connect to the Database: Use a tool like SQL*Plus or SQL Developer to connect to the database using the following details: Host: localhost Port: 1521 Service Name: orclpdb1.localdomain Username: sys Password: localdev Stopping the Container Stop the Container: bash docker-compose down Remove the Volume (Optional): If you want to delete the persistent data, use: bash docker-compose down -v This compose can be furthurmore enhanced by adding monitoring services such as oracle_exporter, grafana/prometheus.io,etc...","title":"Oracle Database Container Setup"},{"location":"examples/oracle/#oracle-database-container-setup","text":"A quick guide to setting up an Oracle Database using Docker Compose.","title":"Oracle Database Container Setup"},{"location":"examples/oracle/#docker-compose-configuration","text":"Here\u2019s the docker-compose.yml file for setting up the Oracle Database container: services: oracle: image: docker.arvancloud.ir/wvbirder/database-enterprise:12.2.0.1-slim container_name: oracle hostname: oracle ports: - \"1521:1521\" # Oracle Database port - \"5000:5000\" # Additional port (optional) environment: - ORACLE_PWD=localdev # Password for the Oracle SYS user - ORACLE_CHARACTERSET=AL32UTF8 # Character set for the database volumes: - oracle_data:/opt/oracle/oradata # Persistent storage for database files networks: - monitoring_network # Custom network for the container healthcheck: test: [ \"CMD\", \"sqlplus\", \"-S\", \"sys/localdev@localhost:1521/orclpdb1.localdomain as sysdba\", \"<\", \"/dev/null\", ] interval: 30s # Check every 30 seconds timeout: 10s # Timeout for the health check retries: 3 # Number of retries before marking as unhealthy logging: driver: \"json-file\" options: max-size: \"10m\" # Maximum log file size max-file: \"3\" # Maximum number of log files deploy: resources: limits: cpus: \"2\" # CPU limit memory: 4G # Memory limit reservations: memory: 2G # Memory reservation volumes: oracle_data: # Persistent volume for Oracle data networks: monitoring_network: # Custom network for the container","title":"Docker Compose Configuration"},{"location":"examples/oracle/#key-components","text":"","title":"Key Components"},{"location":"examples/oracle/#image","text":"The image used is docker.arvancloud.ir/wvbirder/database-enterprise:12.2.0.1-slim . This image does not run init scripts. In case of actual use, you need to modify this image and customize it. Alternatively, you can use the official image from GitHub .","title":"Image"},{"location":"examples/oracle/#ports","text":"1521:1521 : The default port for Oracle Database connections. 5000:5000 : An additional port for other services (optional).","title":"Ports"},{"location":"examples/oracle/#environment-variables","text":"ORACLE_PWD : Sets the password for the Oracle SYS user. ORACLE_CHARACTERSET : Configures the character set for the database.","title":"Environment Variables"},{"location":"examples/oracle/#volumes","text":"oracle_data : Persistent storage for Oracle database files, ensuring data is retained even if the container is restarted.","title":"Volumes"},{"location":"examples/oracle/#networks","text":"monitoring_network : A custom network for the container, allowing it to communicate with other services.","title":"Networks"},{"location":"examples/oracle/#health-check","text":"The health check uses sqlplus to verify the database is running and accessible. It runs every 30 seconds, with a timeout of 10 seconds and 3 retries.","title":"Health Check"},{"location":"examples/oracle/#logging","text":"Logs are stored in JSON format, with a maximum size of 10 MB per file and up to 3 files.","title":"Logging"},{"location":"examples/oracle/#resource-limits","text":"The container is limited to 2 CPUs and 4 GB of memory, with a reservation of 2 GB of memory.","title":"Resource Limits"},{"location":"examples/oracle/#running-the-container","text":"Start the Container: bash docker-compose up -d Check the Logs: bash docker logs -f oracle Connect to the Database: Use a tool like SQL*Plus or SQL Developer to connect to the database using the following details: Host: localhost Port: 1521 Service Name: orclpdb1.localdomain Username: sys Password: localdev","title":"Running the Container"},{"location":"examples/oracle/#stopping-the-container","text":"Stop the Container: bash docker-compose down Remove the Volume (Optional): If you want to delete the persistent data, use: bash docker-compose down -v This compose can be furthurmore enhanced by adding monitoring services such as oracle_exporter, grafana/prometheus.io,etc...","title":"Stopping the Container"},{"location":"examples/python/","text":"Python Oracle Connection Example This example demonstrates how to connect to an Oracle Database using Python. The project includes a Docker setup for easy deployment and a Python application with helper modules for database management. Project Structure . \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 python_app \u2502 \u251c\u2500\u2500 DatabaseHelpers \u2502 \u2502 \u251c\u2500\u2500 DatabaseManager.py \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2514\u2500\u2500 Oracle.py \u2502 \u251c\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 .env \u2502 \u2514\u2500\u2500 Utils \u2502 \u251c\u2500\u2500 EnvLoader.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 Logger.py \u251c\u2500\u2500 requirments.txt \u2514\u2500\u2500 setup_Instant_client.sh Docker Setup The Dockerfile sets up a Python environment with the necessary dependencies and Oracle Instant Client. It runs on python3.11-bookworm-slim version of the python container. Python Application The Python application is structured into modules for database management and utilities. main.py This is the entry point of the application. It initializes the database connection and performs operations. DatabaseHelpers/ This directory contains helper modules for managing database connections and operations. DatabaseManager.py : Manages database connections and queries. Oracle.py : Contains Oracle-specific database operations. Utils/ This directory contains utility modules for environment loading and logging. EnvLoader.py : Loads environment variables. This env file is used to keep secrets and provide modularity to the script. Logger.py : Handles logging for the application. Running the Project Build the Docker Image: bash docker build -t python-oracle . Run the Docker Container: bash docker run python-oracle This setup is a very basic client setup. This image can be later integrated with other tools such as matplot,pandas and steamlit for simple analytics, or like a file importer module. Just a basic setup example.","title":"Python Oracle Connection Example"},{"location":"examples/python/#python-oracle-connection-example","text":"This example demonstrates how to connect to an Oracle Database using Python. The project includes a Docker setup for easy deployment and a Python application with helper modules for database management.","title":"Python Oracle Connection Example"},{"location":"examples/python/#project-structure","text":". \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 python_app \u2502 \u251c\u2500\u2500 DatabaseHelpers \u2502 \u2502 \u251c\u2500\u2500 DatabaseManager.py \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2514\u2500\u2500 Oracle.py \u2502 \u251c\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 .env \u2502 \u2514\u2500\u2500 Utils \u2502 \u251c\u2500\u2500 EnvLoader.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 Logger.py \u251c\u2500\u2500 requirments.txt \u2514\u2500\u2500 setup_Instant_client.sh","title":"Project Structure"},{"location":"examples/python/#docker-setup","text":"The Dockerfile sets up a Python environment with the necessary dependencies and Oracle Instant Client. It runs on python3.11-bookworm-slim version of the python container.","title":"Docker Setup"},{"location":"examples/python/#python-application","text":"The Python application is structured into modules for database management and utilities.","title":"Python Application"},{"location":"examples/python/#mainpy","text":"This is the entry point of the application. It initializes the database connection and performs operations.","title":"main.py"},{"location":"examples/python/#databasehelpers","text":"This directory contains helper modules for managing database connections and operations. DatabaseManager.py : Manages database connections and queries. Oracle.py : Contains Oracle-specific database operations.","title":"DatabaseHelpers/"},{"location":"examples/python/#utils","text":"This directory contains utility modules for environment loading and logging. EnvLoader.py : Loads environment variables. This env file is used to keep secrets and provide modularity to the script. Logger.py : Handles logging for the application.","title":"Utils/"},{"location":"examples/python/#running-the-project","text":"Build the Docker Image: bash docker build -t python-oracle . Run the Docker Container: bash docker run python-oracle This setup is a very basic client setup. This image can be later integrated with other tools such as matplot,pandas and steamlit for simple analytics, or like a file importer module. Just a basic setup example.","title":"Running the Project"},{"location":"examples/shell/","text":"SQL*Plus Basics: Connecting and Using Oracle Database SQL*Plus is a command-line tool for interacting with Oracle Database. Below are some basic commands, connection string syntax, and usage examples. 1. Connecting to Oracle Database Connection String Syntax To connect to an Oracle Database using SQL*Plus, use the following syntax: sqlplus username/password@[//]host[:port][/service_name] username: Your database username (e.g., sys , system , or a custom user). password: Your database password. host: The hostname or IP address of the database server. port: The port number (default is 1521 ). service_name: The service name of the database (e.g., orclpdb1.localdomain ). Examples Connect as sys (sysdba): bash sqlplus sys/localdev@localhost:1521/orclpdb1.localdomain as sysdba Connect as system : bash sqlplus system/localdev@localhost:1521/orclpdb1.localdomain Connect as a regular user: bash sqlplus myuser/mypassword@localhost:1521/orclpdb1.localdomain 2. Basic SQL*Plus Commands Executing SQL Queries Select Query: sql SELECT * FROM TEST; Insert Query: sql INSERT INTO TEST (id, name) VALUES (1, 'John Doe'); Update Query: sql UPDATE TEST SET name = 'Jane Doe' WHERE id = 1; Delete Query: sql DELETE FROM TEST WHERE id = 1; Database Administration Show Current User: sql SHOW USER; Describe a Table: sql DESC employeeTEST; List Tables: sql SELECT table_name FROM user_tables; Run a SQL Script: sql @/path/to/script.sql Formatting Output Set Page Size: sql SET PAGESIZE 50; Set Line Size: sql SET LINESIZE 100; Enable Column Headings: sql SET HEADING ON; Disable Column Headings: sql SET HEADING OFF; Exiting SQL*Plus Exit SQL*Plus: sql EXIT; Disconnect but Stay in SQL*Plus: sql DISCONNECT; 3. Using SQL*Plus in Scripts Run a SQL Script To execute a SQL script from the command line: sqlplus username/password@host:port/service_name @/path/to/script.sql Example Script ( script.sql ): -- script.sql SELECT * FROM TEST; EXIT; Run the script: sqlplus myuser/mypassword@localhost:1521/orclpdb1.localdomain @script.sql 4. Common Connection Issues 1. TNS: Could Not Resolve the Connect Identifier Ensure the service_name is correct. Check if the database is running and accessible. 2. ORA-01017: Invalid Username/Password Double-check the username and password. Ensure the user has the necessary privileges. 3. ORA-12541: TNS: No Listener Ensure the Oracle listener is running on the specified port. Verify the host and port in the connection string.","title":"SQL*Plus Basics: Connecting and Using Oracle Database"},{"location":"examples/shell/#sqlplus-basics-connecting-and-using-oracle-database","text":"SQL*Plus is a command-line tool for interacting with Oracle Database. Below are some basic commands, connection string syntax, and usage examples.","title":"SQL*Plus Basics: Connecting and Using Oracle Database"},{"location":"examples/shell/#1-connecting-to-oracle-database","text":"","title":"1. Connecting to Oracle Database"},{"location":"examples/shell/#connection-string-syntax","text":"To connect to an Oracle Database using SQL*Plus, use the following syntax: sqlplus username/password@[//]host[:port][/service_name] username: Your database username (e.g., sys , system , or a custom user). password: Your database password. host: The hostname or IP address of the database server. port: The port number (default is 1521 ). service_name: The service name of the database (e.g., orclpdb1.localdomain ).","title":"Connection String Syntax"},{"location":"examples/shell/#examples","text":"Connect as sys (sysdba): bash sqlplus sys/localdev@localhost:1521/orclpdb1.localdomain as sysdba Connect as system : bash sqlplus system/localdev@localhost:1521/orclpdb1.localdomain Connect as a regular user: bash sqlplus myuser/mypassword@localhost:1521/orclpdb1.localdomain","title":"Examples"},{"location":"examples/shell/#2-basic-sqlplus-commands","text":"","title":"2. Basic SQL*Plus Commands"},{"location":"examples/shell/#executing-sql-queries","text":"Select Query: sql SELECT * FROM TEST; Insert Query: sql INSERT INTO TEST (id, name) VALUES (1, 'John Doe'); Update Query: sql UPDATE TEST SET name = 'Jane Doe' WHERE id = 1; Delete Query: sql DELETE FROM TEST WHERE id = 1;","title":"Executing SQL Queries"},{"location":"examples/shell/#database-administration","text":"Show Current User: sql SHOW USER; Describe a Table: sql DESC employeeTEST; List Tables: sql SELECT table_name FROM user_tables; Run a SQL Script: sql @/path/to/script.sql","title":"Database Administration"},{"location":"examples/shell/#formatting-output","text":"Set Page Size: sql SET PAGESIZE 50; Set Line Size: sql SET LINESIZE 100; Enable Column Headings: sql SET HEADING ON; Disable Column Headings: sql SET HEADING OFF;","title":"Formatting Output"},{"location":"examples/shell/#exiting-sqlplus","text":"Exit SQL*Plus: sql EXIT; Disconnect but Stay in SQL*Plus: sql DISCONNECT;","title":"Exiting SQL*Plus"},{"location":"examples/shell/#3-using-sqlplus-in-scripts","text":"","title":"3. Using SQL*Plus in Scripts"},{"location":"examples/shell/#run-a-sql-script","text":"To execute a SQL script from the command line: sqlplus username/password@host:port/service_name @/path/to/script.sql","title":"Run a SQL Script"},{"location":"examples/shell/#example-script-scriptsql","text":"-- script.sql SELECT * FROM TEST; EXIT; Run the script: sqlplus myuser/mypassword@localhost:1521/orclpdb1.localdomain @script.sql","title":"Example Script (script.sql):"},{"location":"examples/shell/#4-common-connection-issues","text":"","title":"4. Common Connection Issues"},{"location":"examples/shell/#1-tns-could-not-resolve-the-connect-identifier","text":"Ensure the service_name is correct. Check if the database is running and accessible.","title":"1. TNS: Could Not Resolve the Connect Identifier"},{"location":"examples/shell/#2-ora-01017-invalid-usernamepassword","text":"Double-check the username and password. Ensure the user has the necessary privileges.","title":"2. ORA-01017: Invalid Username/Password"},{"location":"examples/shell/#3-ora-12541-tns-no-listener","text":"Ensure the Oracle listener is running on the specified port. Verify the host and port in the connection string.","title":"3. ORA-12541: TNS: No Listener"}]}